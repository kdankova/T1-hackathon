import streamlit as st
import requests
import json
from datetime import datetime
from typing import Optional, Dict, List
import difflib

API_BASE_URL = "http://localhost:8000"

st.set_page_config(
    page_title="RAG Support - –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
    page_icon="üë®‚Äçüè´",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.markdown("""
<style>
    .main-header {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }
    .pending-item {
        background-color: #fff9e6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #ffc107;
        margin: 1rem 0;
    }
    .diff-old {
        background-color: #ffebee;
        padding: 0.5rem;
        border-radius: 0.3rem;
        margin: 0.5rem 0;
    }
    .diff-new {
        background-color: #e8f5e9;
        padding: 0.5rem;
        border-radius: 0.3rem;
        margin: 0.5rem 0;
    }
    .stat-card {
        background-color: #f5f5f5;
        padding: 1rem;
        border-radius: 0.5rem;
        text-align: center;
        margin: 0.5rem 0;
    }
    .stat-number {
        font-size: 2rem;
        font-weight: bold;
        color: #1f77b4;
    }
    .stat-label {
        font-size: 0.9rem;
        color: #666;
    }
</style>
""", unsafe_allow_html=True)

if 'pending_items' not in st.session_state:
    st.session_state.pending_items = []
if 'selected_item' not in st.session_state:
    st.session_state.selected_item = None
if 'refresh_trigger' not in st.session_state:
    st.session_state.refresh_trigger = 0

def get_pending_items() -> List[Dict]:
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/moderation/pending",
            timeout=10
        )
        if response.status_code == 200:
            data = response.json()
            return data.get('items', [])
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            return []
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return []

def resolve_item(internal_token: str, action: str) -> bool:
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/moderation/resolve",
            json={
                "internal_token": internal_token,
                "action": action
            },
            timeout=10
        )
        if response.status_code == 200:
            return True
        else:
            st.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return False

def get_text_diff(old_text: str, new_text: str) -> str:
    old_lines = old_text.splitlines()
    new_lines = new_text.splitlines()
    
    diff = difflib.unified_diff(old_lines, new_lines, lineterm='')
    return '\n'.join(diff)

def get_stats() -> Dict:
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/moderation/stats",
            timeout=10
        )
        if response.status_code == 200:
            return response.json()
        else:
            return {
                "total_pending": 0,
                "total_approved": 0,
                "total_rejected": 0,
                "avg_response_time": "N/A"
            }
    except:
        return {
            "total_pending": 0,
            "total_approved": 0,
            "total_rejected": 0,
            "avg_response_time": "N/A"
        }

st.markdown('<div class="main-header">üë®‚Äçüè´ RAG Support - –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</div>', unsafe_allow_html=True)

tabs = st.tabs(["üìã –û—á–µ—Ä–µ–¥—å –ø—Ä–∞–≤–æ–∫", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

with tabs[0]:
    col_header1, col_header2 = st.columns([4, 1])
    
    with col_header1:
        st.subheader("–ü—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    
    with col_header2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
            st.session_state.refresh_trigger += 1
            st.rerun()
    
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–æ–∫..."):
        pending_items = get_pending_items()
        st.session_state.pending_items = pending_items
    
    if not pending_items:
        st.info("–ù–µ—Ç –ø—Ä–∞–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    else:
        st.markdown(f"**–í—Å–µ–≥–æ –ø—Ä–∞–≤–æ–∫:** {len(pending_items)}")
        
        for idx, item in enumerate(pending_items):
            with st.expander(
                f"ID: {item['internal_token'][:8]}... | {item['original_question'][:60]}...",
                expanded=(idx == 0)
            ):
                st.markdown(f"**–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞:**")
                st.info(item['original_question'])
                
                st.markdown("---")
                
                col_diff1, col_diff2 = st.columns(2)
                
                with col_diff1:
                    st.markdown("**–ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç:**")
                    st.markdown(f'<div class="diff-old">{item["old_answer"]}</div>', 
                              unsafe_allow_html=True)
                
                with col_diff2:
                    st.markdown("**–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:**")
                    st.markdown(f'<div class="diff-new">{item["edited_answer"]}</div>', 
                              unsafe_allow_html=True)
                
                st.markdown("---")
                
                col_meta1, col_meta2 = st.columns(2)
                with col_meta1:
                    st.caption(f"**–û–ø–µ—Ä–∞—Ç–æ—Ä:** {item.get('suggested_by', 'N/A')}")
                with col_meta2:
                    st.caption(f"**–î–∞—Ç–∞:** {item.get('created_at', 'N/A')[:19]}")
                
                with st.expander("üîç –¢–µ–∫—Å—Ç–æ–≤—ã–π diff"):
                    diff_text = get_text_diff(item['old_answer'], item['edited_answer'])
                    st.code(diff_text, language='diff')
                
                st.markdown("---")
                
                col_action1, col_action2, col_action3 = st.columns([2, 2, 1])
                
                with col_action1:
                    approve_key = f"approve_{item['internal_token']}_{st.session_state.refresh_trigger}"
                    if st.button(
                        "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å",
                        key=approve_key,
                        type="primary",
                        use_container_width=True
                    ):
                        if resolve_item(item['internal_token'], 'approve'):
                            st.success("‚úÖ –ü—Ä–∞–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –±–∞–∑–µ")
                            st.balloons()
                            st.session_state.refresh_trigger += 1
                            st.rerun()
                
                with col_action2:
                    reject_key = f"reject_{item['internal_token']}_{st.session_state.refresh_trigger}"
                    if st.button(
                        "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        key=reject_key,
                        use_container_width=True
                    ):
                        if resolve_item(item['internal_token'], 'reject'):
                            st.warning("‚ùå –ü—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
                            st.session_state.refresh_trigger += 1
                            st.rerun()
                
                with col_action3:
                    st.button("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", key=f"skip_{item['internal_token']}", use_container_width=True)

with tabs[1]:
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    
    stats = get_stats()
    
    col_stat1, col_stat2, col_stat3, col_stat4 = st.columns(4)
    
    with col_stat1:
        st.markdown(f"""
        <div class="stat-card">
            <div class="stat-number">{stats.get('total_pending', 0)}</div>
            <div class="stat-label">–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col_stat2:
        st.markdown(f"""
        <div class="stat-card">
            <div class="stat-number">{stats.get('total_approved', 0)}</div>
            <div class="stat-label">–û–¥–æ–±—Ä–µ–Ω–æ</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col_stat3:
        st.markdown(f"""
        <div class="stat-card">
            <div class="stat-number">{stats.get('total_rejected', 0)}</div>
            <div class="stat-label">–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col_stat4:
        st.markdown(f"""
        <div class="stat-card">
            <div class="stat-number">{stats.get('avg_response_time', 'N/A')}</div>
            <div class="stat-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</div>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    st.subheader("Coverage –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    
    if stats.get('category_coverage'):
        import pandas as pd
        df = pd.DataFrame(stats['category_coverage'])
        st.dataframe(df, use_container_width=True)
    else:
        st.info("–î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    st.markdown("---")
    
    st.subheader("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")
    
    if stats.get('operator_activity'):
        import pandas as pd
        df = pd.DataFrame(stats['operator_activity'])
        st.dataframe(df, use_container_width=True)
    else:
        st.info("–î–∞–Ω–Ω—ã–µ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

st.sidebar.markdown("### ‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
st.sidebar.markdown("""
**–ü—Ä–æ—Ü–µ—Å—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏:**

1. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é –ø—Ä–∞–≤–∫—É
2. –°—Ä–∞–≤–Ω–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç—ã
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ diff –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
4. –û–¥–æ–±—Ä–∏—Ç–µ (‚úÖ) –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ (‚ùå) –ø—Ä–∞–≤–∫—É

**–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è:**
- –ü—Ä–∞–≤–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –±–∞–∑–µ
- –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
""")

st.sidebar.markdown("---")

st.sidebar.markdown(f"**–°—Ç–∞—Ç—É—Å API:** {'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' if True else 'üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
st.sidebar.markdown(f"**–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}")
st.sidebar.markdown(f"**–ü—Ä–∞–≤–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏:** {len(st.session_state.pending_items)}")

