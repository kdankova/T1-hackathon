import streamlit as st
import requests
import json
from datetime import datetime
from config import API_BASE_URL, API_TIMEOUT

st.set_page_config(
    page_title="RAG Support - Moderator",
    page_icon="üë®‚Äç‚öñÔ∏è",
    layout="wide"
)

st.title("üë®‚Äç‚öñÔ∏è RAG Support - Moderator Panel")

def get_pending_items():
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/moderation/pending",
            timeout=API_TIMEOUT
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {str(e)}")
        return None

def resolve_feedback(internal_token, action):
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/moderation/resolve",
            json={
                "internal_token": internal_token,
                "action": action
            },
            timeout=API_TIMEOUT
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        return None

def get_stats():
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/moderation/stats",
            timeout=API_TIMEOUT
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return None

st.sidebar.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
stats = get_stats()
if stats:
    st.sidebar.metric("–û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏", stats.get("total_pending", 0))
    st.sidebar.metric("–ü—Ä–∏–Ω—è—Ç–æ", stats.get("total_approved", 0))
    st.sidebar.metric("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", stats.get("total_rejected", 0))

st.sidebar.divider()

st.sidebar.header("üîó API —Å—Ç–∞—Ç—É—Å")
try:
    response = requests.get(f"{API_BASE_URL}/", timeout=5)
    if response.status_code == 200:
        st.sidebar.success("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        st.sidebar.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
except:
    st.sidebar.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", type="primary"):
    st.rerun()

st.divider()

st.header("üìã –°–ø–∏—Å–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

pending_data = get_pending_items()

if pending_data and pending_data.get("items"):
    items = pending_data["items"]
    st.info(f"–í—Å–µ–≥–æ –ø—Ä–∞–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {len(items)}")
    
    for idx, item in enumerate(items, 1):
        with st.expander(f"#{idx} - {item['original_question'][:80]}...", expanded=True):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.write(f"**–¢–æ–∫–µ–Ω:** `{item['internal_token']}`")
                st.write(f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {item['created_at']}")
                if item.get('suggested_by'):
                    st.write(f"**–ü—Ä–µ–¥–ª–æ–∂–∏–ª:** {item['suggested_by']}")
                
                st.divider()
                
                st.write("**–ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å:**")
                st.info(item['original_question'])
                
                st.write("**–°—Ç–∞—Ä—ã–π –æ—Ç–≤–µ—Ç:**")
                st.text_area(
                    "–°—Ç–∞—Ä—ã–π", 
                    value=item['old_answer'], 
                    height=120, 
                    disabled=True,
                    key=f"old_{idx}"
                )
                
                st.write("**–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç:**")
                st.text_area(
                    "–ù–æ–≤—ã–π", 
                    value=item['edited_answer'], 
                    height=120, 
                    disabled=True,
                    key=f"new_{idx}"
                )
            
            with col2:
                st.write("")
                st.write("")
                st.write("")
                
                if st.button("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", key=f"approve_{idx}", type="primary", use_container_width=True):
                    with st.spinner("–ü—Ä–∏–º–µ–Ω—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è..."):
                        result = resolve_feedback(item['internal_token'], "approve")
                        if result:
                            if result.get("reembedded"):
                                st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã! –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
                            else:
                                st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
                            st.balloons()
                            st.rerun()
                
                if st.button("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", key=f"reject_{idx}", use_container_width=True):
                    result = resolve_feedback(item['internal_token'], "reject")
                    if result:
                        st.warning("‚ùå –ü—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
                        st.rerun()
            
            st.divider()
else:
    st.success("‚úÖ –ù–µ—Ç –ø—Ä–∞–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏!")
    st.balloons()

