import streamlit as st
import requests
import json
from config import API_BASE_URL, API_TIMEOUT

st.set_page_config(
    page_title="RAG Support - Operator",
    page_icon="ü§ñ",
    layout="wide"
)

st.title("ü§ñ RAG Support - Operator Panel")

def search_api(query, top_k=3):
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/search",
            json={"query": query, "top_k": top_k},
            timeout=API_TIMEOUT
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ API: {str(e)}")
        return None

def send_feedback(original_question, original_answer, edited_answer, note):
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/feedback",
            json={
                "original_question": original_question,
                "original_answer": original_answer,
                "edited_answer": edited_answer,
                "note": note
            },
            timeout=API_TIMEOUT
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ feedback: {str(e)}")
        return None

col1, col2 = st.columns([2, 1])

with col1:
    st.header("üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
    
    query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç?")
    
    if st.button("–ü–æ–∏—Å–∫", type="primary"):
        if query:
            with st.spinner("–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π..."):
                result = search_api(query)
                
                if result:
                    st.success("‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç!")
                    
                    st.subheader("üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:")
                    st.write(result["draft"])
                    
                    st.subheader("üìö –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
                    for i, alt in enumerate(result["alternatives"], 1):
                        st.write(f"{i}. {alt}")
                    
                    st.subheader("üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
                    for i, meta in enumerate(result["results_meta"], 1):
                        with st.expander(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i}: {meta['question']}"):
                            st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {meta['taxonomy']['category']}")
                            st.write(f"**–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:** {meta['taxonomy']['subcategory']}")
                            st.write(f"**–û—Ç–≤–µ—Ç:** {meta['answer']}")

with col2:
    st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.info("""
    **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
    1. –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞
    2. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–∏—Å–∫"
    3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –∫–ª–∏–µ–Ω—Ç—É
    4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """)
    
    st.header("üîó API —Å—Ç–∞—Ç—É—Å")
    try:
        response = requests.get(f"{API_BASE_URL}/", timeout=5)
        if response.status_code == 200:
            st.success("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

