import streamlit as st
import requests
import json
from datetime import datetime
from typing import Optional, Dict, List

API_BASE_URL = "http://localhost:8000"

st.set_page_config(
    page_title="RAG Support - –û–ø–µ—Ä–∞—Ç–æ—Ä",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.markdown("""
<style>
    .main-header {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }
    .draft-answer {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
        margin: 1rem 0;
    }
    .meta-info {
        background-color: #e8eaf6;
        padding: 0.5rem;
        border-radius: 0.3rem;
        font-size: 0.9rem;
        margin: 0.5rem 0;
    }
    .stButton>button {
        width: 100%;
    }
    .alternative-answer {
        background-color: #fff3cd;
        padding: 0.8rem;
        border-radius: 0.3rem;
        margin: 0.5rem 0;
        border-left: 3px solid #ffc107;
    }
</style>
""", unsafe_allow_html=True)

if 'draft_answer' not in st.session_state:
    st.session_state.draft_answer = ""
if 'original_answer' not in st.session_state:
    st.session_state.original_answer = ""
if 'current_question' not in st.session_state:
    st.session_state.current_question = ""
if 'search_results' not in st.session_state:
    st.session_state.search_results = None
if 'internal_token' not in st.session_state:
    st.session_state.internal_token = None

def search_answer(query: str, top_k: int = 3) -> Optional[Dict]:
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/search",
            json={"query": query, "top_k": top_k},
            timeout=10
        )
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return None

def send_feedback(original_question: str, original_answer: str, edited_answer: str, note: str = "") -> bool:
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/feedback",
            json={
                "original_question": original_question,
                "original_answer": original_answer,
                "edited_answer": edited_answer,
                "note": note
            },
            timeout=10
        )
        if response.status_code == 200:
            result = response.json()
            st.session_state.internal_token = result.get('internal_token')
            return True
        else:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ feedback: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return False

def add_new_qa(question: str, answer: str, category: str, subcategory: str, subtopic: str) -> bool:
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/qa/add",
            json={
                "question": question,
                "answer": answer,
                "taxonomy": {
                    "category": category,
                    "subcategory": subcategory,
                    "subtopic": subtopic
                }
            },
            timeout=10
        )
        if response.status_code == 200:
            return True
        else:
            st.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Q&A: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return False

st.markdown('<div class="main-header">üéØ RAG Support - –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</div>', unsafe_allow_html=True)

col1, col2 = st.columns([3, 1])

with col1:
    st.subheader("–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞")
    question = st.text_area(
        "–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞",
        value=st.session_state.current_question,
        height=100,
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∑–¥–µ—Å—å...",
        label_visibility="collapsed"
    )
    
    col_btn1, col_btn2, col_btn3 = st.columns([2, 1, 1])
    with col_btn1:
        search_btn = st.button("üîç –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç", type="primary", use_container_width=True)
    with col_btn2:
        clear_btn = st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True)

    if search_btn and question:
        with st.spinner("–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞..."):
            results = search_answer(question)
            if results:
                st.session_state.search_results = results
                st.session_state.draft_answer = results.get('draft', '')
                st.session_state.original_answer = results.get('draft', '')
                st.session_state.current_question = question
                st.rerun()
    
    if clear_btn:
        st.session_state.draft_answer = ""
        st.session_state.original_answer = ""
        st.session_state.current_question = ""
        st.session_state.search_results = None
        st.session_state.internal_token = None
        st.rerun()

    if st.session_state.search_results:
        st.markdown("---")
        st.subheader("–û—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")
        
        edited_answer = st.text_area(
            "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –æ—Ç–≤–µ—Ç",
            value=st.session_state.draft_answer,
            height=200,
            key="answer_editor",
            label_visibility="collapsed"
        )
        
        col_act1, col_act2, col_act3 = st.columns(3)
        
        with col_act1:
            if st.button("üîÑ –í–µ—Ä–Ω—É—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", use_container_width=True):
                st.session_state.draft_answer = st.session_state.original_answer
                st.rerun()
        
        with col_act2:
            if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True):
                st.code(edited_answer, language=None)
                st.success("–¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é –≤—ã—à–µ")
        
        with col_act3:
            if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å feedback", use_container_width=True):
                if edited_answer != st.session_state.original_answer:
                    note = st.text_input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–∞–≤–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", key="feedback_note")
                    if send_feedback(
                        st.session_state.current_question,
                        st.session_state.original_answer,
                        edited_answer,
                        note
                    ):
                        st.success("‚úÖ Feedback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
                        if st.session_state.internal_token:
                            st.info(f"ID –ø—Ä–∞–≤–∫–∏: {st.session_state.internal_token[:8]}...")
                else:
                    st.info("–û—Ç–≤–µ—Ç –Ω–µ –∏–∑–º–µ–Ω—ë–Ω, feedback –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        
        if st.session_state.search_results.get('alternatives'):
            with st.expander("üìö –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏"):
                for i, alt in enumerate(st.session_state.search_results['alternatives'], 1):
                    st.markdown(f'<div class="alternative-answer"><strong>–í–∞—Ä–∏–∞–Ω—Ç {i}:</strong><br>{alt}</div>', 
                              unsafe_allow_html=True)

with col2:
    st.subheader("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
    
    if st.session_state.search_results and st.session_state.search_results.get('results_meta'):
        for idx, meta in enumerate(st.session_state.search_results['results_meta'], 1):
            with st.expander(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {idx}", expanded=(idx == 1)):
                taxonomy = meta.get('taxonomy', {})
                st.markdown(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {taxonomy.get('category', 'N/A')}")
                st.markdown(f"**–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:** {taxonomy.get('subcategory', 'N/A')}")
                st.markdown(f"**–¢–æ–ø–∏–∫:** {taxonomy.get('subtopic', 'N/A')}")
                
                if 'updated_at' in meta:
                    st.markdown(f"**–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {meta['updated_at'][:10]}")
                
                if 'question' in meta:
                    st.markdown(f"**–ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å:**")
                    st.caption(meta['question'])
    else:
        st.info("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")

st.markdown("---")
st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—É Q&A")

with st.expander("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É"):
    new_question = st.text_area("–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", height=80, key="new_q")
    new_answer = st.text_area("–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç", height=120, key="new_a")
    
    col_tax1, col_tax2, col_tax3 = st.columns(3)
    with col_tax1:
        new_category = st.text_input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", key="new_cat")
    with col_tax2:
        new_subcategory = st.text_input("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", key="new_subcat")
    with col_tax3:
        new_subtopic = st.text_input("–¢–æ–ø–∏–∫", key="new_topic")
    
    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É", type="primary"):
        if new_question and new_answer and new_category:
            if add_new_qa(new_question, new_answer, new_category, new_subcategory, new_subtopic):
                st.success("‚úÖ –ù–æ–≤–∞—è –ø–∞—Ä–∞ Q&A –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
                st.balloons()
        else:
            st.warning("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∏–Ω–∏–º—É–º –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")

st.sidebar.markdown("### ‚ÑπÔ∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏")
st.sidebar.markdown("""
**Streamlit —Ä–µ–∂–∏–º:**
- `R` - –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- `C` - –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à

**Embed –ø–∞–Ω–µ–ª—å (bookmarklet):**
- `Cmd+Shift+K` (Mac) / `Ctrl+Shift+K` (Win) - —Å–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å
- `Cmd+Enter` (Mac) / `Ctrl+Enter` (Win) - –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
- `Esc` - –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
""")

st.sidebar.markdown("---")
st.sidebar.markdown(f"**–°—Ç–∞—Ç—É—Å API:** {'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' if True else 'üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
st.sidebar.markdown(f"**–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}")

